[build-system]
requires = ["setuptools>=69.4.2", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
requires-python = ">=3.10"
name = "dojo-synthetic-gen"
description = "dojo synthetic gen"
readme = "README.md"
authors = [{name = "jarvis8x7b"}, {name = "mediumsizeworkingdog"}]
license = {text = "MIT"}
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules"
]
version = "0.0.1"
dependencies = [
  "fastapi>=0.110.1",
  "loguru==0.7.2",
  "numpy==2.0.0",
  "openai>=1.0.0",
  "pydantic==2.8.2",
  "python-dotenv==1.0.1",
  "StrEnum==0.4.15",
  "tenacity==8.5.0",
  "uvicorn==0.22.0",
  "redis==4.6.0",
  "types-redis==4.6.0.20240903",
  "instructor==1.4.1",
  "anthropic==0.25.7",
  "langfuse==3.3.4",
  "lfs",
  "datasets",
  "pydantic-settings==2.5.2",
  "rich==13.8.0",
  "uuid-utils==0.9.0",
  "beautifulsoup4==4.12.3",
  "python-Levenshtein",
  "langchain",
  "langchain-openai"
]

[project.optional-dependencies]
dev = ["commitizen", "pytest", "ruff", "oxen"]
test = ["pytest", "nox"]

[project.urls]
Homepage = "https://github.com/tensorplex-labs/dojo-synthetic-gen"
Documentation = "https://docs.tensorplex.ai/tensorplex-docs/tensorplex-dojo-testnet"
Repository = "https://github.com/tensorplex-labs/dojo-synthetic-gen"

[tool.commitizen]
name = "cz_conventional_commits"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  ".idea",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv"
]
show-fixes = true
output-format = "full"
# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
preview = true
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
  "E4", # import-related errors (e.g., unused imports, import order)
  "E7", # statement-related errors (e.g., multiple statements on one line)
  "E9", # runtime errors (e.g., syntax errors, undefined names)
  "F", # pyflakes errors (e.g., unused variables, undefined names)
  "UP", # pyupgrade rules (suggests newer python syntax)
  "I", # isort rules (sorts and organizes imports)
  "B", # flake8-bugbear
  "ARG", # flake8-unused-arguments
  "RUF029" # unused async
]
ignore = [
  "UP006", # Preserve 'typing.Tuple' instead of 'tuple'
  "UP035", # Preserve 'typing.Dict' instead of 'dict'
  "C901", # Ignore McCabe complexity (if you use flake8 complexity checks)
  "E203" # Ignore whitespace before ':', conflicts with Black] # Ignore specific pyupgrade rules that prevent the project from running
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.setuptools]
packages = {find = {}}
include-package-data = true
